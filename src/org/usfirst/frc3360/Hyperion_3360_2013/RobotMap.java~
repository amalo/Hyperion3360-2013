// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
package org.usfirst.frc3360.Hyperion_3360_2013;
    
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import java.util.Vector;
/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static SpeedController canonCanon_SpinnerMotor;
    public static DoubleSolenoid canonShooterSolenoid;
    public static DigitalInput canonLimitSwitchCharged1;
    public static DigitalInput canonLimitSwitchCharged2;
    public static DoubleSolenoid canonChargerSolenoid;
    public static DoubleSolenoid canonSetShooterAngle;
    public static SpeedController driveTrainFrontLeftMotor;
    public static SpeedController driveTrainRearLeftMotor;
    public static SpeedController driveTrainFrontRightMotor;
    public static SpeedController driveTrainRearRightMotor;
    public static RobotDrive driveTrainRobotDrive41;
    public static DoubleSolenoid driveTrainRearPiston;
    public static DoubleSolenoid ascentAscent_SolenoidBlockHookRight;
    public static DoubleSolenoid ascentAscent_SolenoidBlockHookLeft;
    public static SpeedController ascentAscent_MotorLeft;
    public static SpeedController ascentAscent_MotorRight;
    public static SpeedController ascentAscent_SetAngle;
    public static DigitalInput ascentAscent_LimitSwitchUp;
    public static DigitalInput ascentAscent_LimitSwitchDown;
    public static DigitalInput ascentAscent_LimitSwitchFront;
    public static DigitalInput ascentAscent_LimitSwitchRear;
    public static DoubleSolenoid ascentPistonHookR;
    public static DoubleSolenoid ascentPistonHookL;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        canonCanon_SpinnerMotor = new Talon(1, 5);
	LiveWindow.addActuator("Canon", "Canon_SpinnerMotor", (Talon) canonCanon_SpinnerMotor);
        
        canonShooterSolenoid = new DoubleSolenoid(1, 1, 2);      
	
        
        canonLimitSwitchCharged1 = new DigitalInput(1, 1);
	LiveWindow.addSensor("Canon", "LimitSwitchCharged1", canonLimitSwitchCharged1);
        
        canonLimitSwitchCharged2 = new DigitalInput(1, 2);
	LiveWindow.addSensor("Canon", "LimitSwitchCharged2", canonLimitSwitchCharged2);
        
        canonChargerSolenoid = new DoubleSolenoid(1, 3, 4);      
	
        
        canonSetShooterAngle = new DoubleSolenoid(1, 5, 6);      
	
        
        driveTrainFrontLeftMotor = new Talon(1, 1);
	LiveWindow.addActuator("DriveTrain", "FrontLeftMotor", (Talon) driveTrainFrontLeftMotor);
        
        driveTrainRearLeftMotor = new Talon(1, 2);
	LiveWindow.addActuator("DriveTrain", "RearLeftMotor", (Talon) driveTrainRearLeftMotor);
        
        driveTrainFrontRightMotor = new Talon(1, 3);
	LiveWindow.addActuator("DriveTrain", "FrontRightMotor", (Talon) driveTrainFrontRightMotor);
        
        driveTrainRearRightMotor = new Talon(1, 4);
	LiveWindow.addActuator("DriveTrain", "RearRightMotor", (Talon) driveTrainRearRightMotor);
        
        driveTrainRobotDrive41 = new RobotDrive(driveTrainFrontLeftMotor, driveTrainRearLeftMotor,
              driveTrainFrontRightMotor, driveTrainRearRightMotor);
	
        driveTrainRobotDrive41.setSafetyEnabled(true);
        driveTrainRobotDrive41.setExpiration(0.1);
        driveTrainRobotDrive41.setSensitivity(0.5);
        driveTrainRobotDrive41.setMaxOutput(1.0);
        driveTrainRearPiston = new DoubleSolenoid(1, 7, 8);      
	
        
        ascentAscent_SolenoidBlockHookRight = new DoubleSolenoid(2, 1, 2);      
	
        
        ascentAscent_SolenoidBlockHookLeft = new DoubleSolenoid(2, 3, 4);      
	
        
        ascentAscent_MotorLeft = new Talon(1, 8);
	LiveWindow.addActuator("Ascent", "Ascent_MotorLeft", (Talon) ascentAscent_MotorLeft);
        
        ascentAscent_MotorRight = new Talon(1, 9);
	LiveWindow.addActuator("Ascent", "Ascent_MotorRight", (Talon) ascentAscent_MotorRight);
        
        ascentAscent_SetAngle = new Talon(1, 10);
	LiveWindow.addActuator("Ascent", "Ascent_SetAngle", (Talon) ascentAscent_SetAngle);
        
        ascentAscent_LimitSwitchUp = new DigitalInput(1, 3);
	LiveWindow.addSensor("Ascent", "Ascent_LimitSwitchUp", ascentAscent_LimitSwitchUp);
        
        ascentAscent_LimitSwitchDown = new DigitalInput(1, 4);
	LiveWindow.addSensor("Ascent", "Ascent_LimitSwitchDown", ascentAscent_LimitSwitchDown);
        
        ascentAscent_LimitSwitchFront = new DigitalInput(1, 5);
	LiveWindow.addSensor("Ascent", "Ascent_LimitSwitchFront", ascentAscent_LimitSwitchFront);
        
        ascentAscent_LimitSwitchRear = new DigitalInput(1, 6);
	LiveWindow.addSensor("Ascent", "Ascent_LimitSwitchRear", ascentAscent_LimitSwitchRear);
        
        ascentPistonHookR = new DoubleSolenoid(2, 5, 6);      
	
        
        ascentPistonHookL = new DoubleSolenoid(2, 7, 8);      
	
        
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
}
