// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
package org.usfirst.frc3360.Hyperion_3360_2013.subsystems;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.Servo;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Timer;
import org.usfirst.frc3360.Hyperion_3360_2013.RobotMap;
import edu.wpi.first.wpilibj.command.Subsystem;
/**
 *
 */
public class Ascent extends Subsystem {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    DoubleSolenoid ascent_SolenoidBlockHookRight = RobotMap.ascentAscent_SolenoidBlockHookRight;
    DoubleSolenoid ascent_SolenoidBlockHookLeft = RobotMap.ascentAscent_SolenoidBlockHookLeft;
    SpeedController ascent_MotorLeft = RobotMap.ascentAscent_MotorLeft;
    SpeedController ascent_MotorRight = RobotMap.ascentAscent_MotorRight;
    SpeedController ascent_SetAngle = RobotMap.ascentAscent_SetAngle;
    DigitalInput ascent_LimitSwitchUp = RobotMap.ascentAscent_LimitSwitchUp;
    DigitalInput ascent_LimitSwitchDown = RobotMap.ascentAscent_LimitSwitchDown;
    DigitalInput ascent_LimitSwitchFront = RobotMap.ascentAscent_LimitSwitchFront;
    DigitalInput ascent_LimitSwitchRear = RobotMap.ascentAscent_LimitSwitchRear;
    DoubleSolenoid pistonHookR = RobotMap.ascentPistonHookR;
    DoubleSolenoid pistonHookL = RobotMap.ascentPistonHookL;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    //A CHANGER DEPENDAMENT DE L'ANGLE DU SERVO
    final double AngleHooksOn = 90;
    final double AngleHooksOff = 0;
    final double TimePistonHooks = 1.5;
    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }
    public void CharoitGoUp(){
     //   if (!ascent_LimitSwitchUp.get()){
        //il faut inverser un moteur car ils sont sur la meme gear...
        ascent_MotorLeft.set(1);
        ascent_MotorRight.set(-1);
     //   }
      //  else {
      //  ChariotDoNothing();
        
      //  }
    }
    public void ChariotGoDown(){
      //  if (!ascent_LimitSwitchDown.get()){
        //il faut inverser un moteur car ils sont sur la meme gear...
        ascent_MotorLeft.set(-1);
        ascent_MotorRight.set(1);
      //  }
     //   else {
      //  ChariotDoNothing();
        
      //  }
        
    }
    public void ChariotDoNothing(){
        ascent_MotorLeft.set(0);
        ascent_MotorRight.set(0);
    }
    public void AngleGoFront(){
      //  if (!ascent_LimitSwitchFront.get()){
        ascent_SetAngle.set(1);
        
        }
       // else {
        
     //   AngleDoNothing();
      //  }
   // }
    public void AngleGoRear(){
     //   if (!ascent_LimitSwitchRear.get()){
        ascent_SetAngle.set(-1);
        
        }
      //  else {
        
      //  AngleDoNothing();
       // }
        
  //  }
    public void AngleDoNothing(){
        ascent_SetAngle.set(0);
    }
    public void HooksOn(){
        pistonHookR.set(DoubleSolenoid.Value.kForward);
        pistonHookL.set(DoubleSolenoid.Value.kForward);
        Timer.delay(TimePistonHooks);
        ascent_SolenoidBlockHookLeft.set(DoubleSolenoid.Value.kForward);
        ascent_SolenoidBlockHookRight.set(DoubleSolenoid.Value.kForward);
    }
    public void HooksOff(){
        ascent_SolenoidBlockHookLeft.set(DoubleSolenoid.Value.kReverse);
        ascent_SolenoidBlockHookRight.set(DoubleSolenoid.Value.kReverse);
        Timer.delay(TimePistonHooks);
        pistonHookR.set(DoubleSolenoid.Value.kReverse);
        pistonHookL.set(DoubleSolenoid.Value.kReverse);
    }
}
