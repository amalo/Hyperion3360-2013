package org.usfirst.frc3360.Hyperion_3360_2013.subsystems;

import org.usfirst.frc3360.Hyperion_3360_2013.RobotMap;
import org.usfirst.frc3360.Hyperion_3360_2013.commands.*;
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.command.Subsystem;
import org.usfirst.frc3360.Hyperion_3360_2013.Robot;

public class Frisbee extends Subsystem {

    DoubleSolenoid shooterSolenoid = RobotMap.canonShooterSolenoid;
    DoubleSolenoid chargerSolenoid = RobotMap.canonChargerSolenoid;
    private boolean m_bChargeFrisbeeRequest;
    private boolean m_bShootFrisbeeRequest;
    // Charging state
    private boolean m_FrisbeeCharged;
    // Shooting state
    private boolean m_bShoot;
    private long m_ShootTimeMs;
    // Private 
    private final DoubleSolenoid.Value m_chargeOn = DoubleSolenoid.Value.kForward;
    private final DoubleSolenoid.Value m_chargeOff = DoubleSolenoid.Value.kReverse;
    private final DoubleSolenoid.Value m_ShooterPushFrisbeePosition = DoubleSolenoid.Value.kReverse;
    private final DoubleSolenoid.Value m_ShooterPullFrisbeePosition = DoubleSolenoid.Value.kForward;
    private final long m_PullBackShooterTimeMs = 400;
    private final long m_NextShotDelayMs = 1500;
    private final long m_SpinningTimeForFirstShootMs = 2000;

    public Frisbee() {
        // No command must be executed at the begining.
        m_bChargeFrisbeeRequest = false;
        m_bShootFrisbeeRequest = false;
        // Set the default state.
        m_FrisbeeCharged = true;
        m_bShoot = false;
        m_ShootTimeMs = 0;
        // Set the actuator in the good state.
        shooterSolenoid.set(m_ShooterPullFrisbeePosition);
    }
    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        setDefaultCommand(new DefaultFrisbeeHandler());
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
    }
    // Public control methods

    public void ChargeFrisbee() {
        System.out.println("Requested charge");
        m_bChargeFrisbeeRequest = true;
    }

    public void ShootFrisbee() {
        System.out.println("Requested shoot");
        m_bShootFrisbeeRequest = true;
    }

    // Internal canon handlers
    public void HandleShoot() {
        boolean bShot = false;
        long shotTimeElapsed = System.currentTimeMillis() - m_ShootTimeMs;

        if (m_bShootFrisbeeRequest) {
            m_bShootFrisbeeRequest = false;
            bShot = CanShoot();
            System.out.println("Requested shoot and CanShoot is: " + bShot);
        }

        if (m_bShoot && shotTimeElapsed > m_PullBackShooterTimeMs) {
            System.out.println("Pulling back shooter piston");
            // Pullback the solenoid after a shot, but only after a short delay
            shooterSolenoid.set(m_ShooterPullFrisbeePosition);
            m_bShoot = false;
            m_FrisbeeCharged = false;
        } else if (bShot && !m_bShoot) {
            System.out.println("Shooting at :" + System.currentTimeMillis());
            // Push the frisbee with the solenoid to perform a shot.
            shooterSolenoid.set(m_ShooterPushFrisbeePosition);
            m_bShoot = true;
            m_ShootTimeMs = System.currentTimeMillis();
        }
    }

    public void HandleCharger() {
        if (m_bChargeFrisbeeRequest) {
            System.out.println("Handling charge request");
            m_bChargeFrisbeeRequest = false;

            if (!m_FrisbeeCharged) {
                System.out.println("Charging");
                Timer.delay(0.45);
                chargerSolenoid.set(m_chargeOn);
                Timer.delay(0.2);
                chargerSolenoid.set(m_chargeOff);
                m_FrisbeeCharged = true;
                System.out.println("Charged");
            }
        }
    }
    // Helpers

    private boolean CanShoot() {
        long timeSinceLastShot = System.currentTimeMillis() - m_ShootTimeMs;
        System.out.println("Time since last shot:" + timeSinceLastShot);
        return /* Must be spinning */ Robot.shooterSpinner.IsSpinning()
                && /* Must be spinning for at least X second */ (Robot.shooterSpinner.GetSpinningTime() > m_SpinningTimeForFirstShootMs)
                && /* Must not have shoot since X second */ (timeSinceLastShot > m_NextShotDelayMs)
                && /* Must think that a frisbee is charged */ m_FrisbeeCharged;
    }
}
