// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
package org.usfirst.frc3360.Hyperion_3360_2013;
import org.usfirst.frc3360.Hyperion_3360_2013.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.buttons.*;
/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);
    
    // Another type of button you can create is a DigitalIOButton, which is
    // a button or switch hooked up to the cypress module. These are useful if
    // you want to build a customized operator interface.
    // Button button = new DigitalIOButton(1);
    
    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.
    
    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:
    
    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());
    
    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());
    
    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());
    final double Angle1 = 80;
    final double Angle2 = 60;
    final double Angle3 = 40;
    final double Angle4 = 20;
    
    public JoystickButton button_HooksOff;
    public JoystickButton button_AngleFront;
    public JoystickButton button_AngleRear;
    public Joystick joyL;
    public JoystickButton button_HooksOn;
    public JoystickButton button_ChariotUp;
    public JoystickButton button_ChariotDown;
    public JoystickButton button_PistonPush;
    public JoystickButton button_PistonPull;
    public Joystick joyR;
    public JoystickButton button_SetSpinnerSpeed;
    public JoystickButton button_ChargeAndShoot;
    public JoystickButton button_ShootFrisbee;
    public JoystickButton button_ChargeFrisbee;
    public JoystickButton button_SetShooterAngle1;
    public JoystickButton button_SetShooterAngle2;
    public JoystickButton button_SetSpinnerSpeedTower;
    public Joystick joyCoPilot;
    

    public OI() {
        
        joyCoPilot = new Joystick(3);
        
        button_SetShooterAngle2 = new JoystickButton(joyCoPilot, 2);
        button_SetShooterAngle2.whenPressed(new Canon_SetShooterAngle2());
        button_SetShooterAngle1 = new JoystickButton(joyCoPilot, 1);
        button_SetShooterAngle1.whenPressed(new Canon_SetShooterAngle1());
        button_ChargeFrisbee = new JoystickButton(joyCoPilot, 7);
        button_ChargeFrisbee.whenPressed(new Canon_ChargeFrisbee());
        button_ShootFrisbee = new JoystickButton(joyCoPilot, 8);
        button_ShootFrisbee.whenPressed(new Canon_ShootFrisbee());
        button_ChargeAndShoot = new JoystickButton(joyCoPilot, 6);
        button_ChargeAndShoot.whileHeld(new Canon_ChargeAndShoot());
        button_SetSpinnerSpeed = new JoystickButton(joyCoPilot, 5);
        button_SetSpinnerSpeed.whileHeld(new Canon_SetSpinnerSpeed());
        button_SetSpinnerSpeedTower = new JoystickButton(joyCoPilot, 9);
        button_SetSpinnerSpeedTower.whileHeld(new Canon_SetSpinnerSpeedTower());
        joyR = new Joystick(2);
        
        button_PistonPull = new JoystickButton(joyR, 10);
        button_PistonPull.whenPressed(new DriveTrain_PistonPull());
        button_PistonPush = new JoystickButton(joyR, 11);
        button_PistonPush.whenPressed(new DriveTrain_PistonPush());
        button_ChariotDown = new JoystickButton(joyR, 2);
        button_ChariotDown.whileHeld(new Ascent_ChariotDown());
        button_ChariotUp = new JoystickButton(joyR, 3);
        button_ChariotUp.whileHeld(new Ascent_ChariotUp());
        button_HooksOn = new JoystickButton(joyR, 1);
        button_HooksOn.whenPressed(new Ascent_HooksOn());
        joyL = new Joystick(1);
        
        button_AngleRear = new JoystickButton(joyL, 2);
        button_AngleRear.whileHeld(new Ascent_AngleRear());
        button_AngleFront = new JoystickButton(joyL, 3);
        button_AngleFront.whileHeld(new Ascent_AngleFront());
        button_HooksOff = new JoystickButton(joyL, 1);
        button_HooksOff.whenPressed(new Ascent_HooksOff());
    }
    
    public Joystick getJoyL() {
        return joyL;
    }
    public Joystick getJoyR() {
        return joyR;
    }
    public Joystick getJoyCoPilot() {
        return joyCoPilot;
    }
}
